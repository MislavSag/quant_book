[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction (#section-intro)",
    "section": "",
    "text": "1.1 Becktesting engine (Quantconnect)\nIn most cases, you will use a backtesting engine to test your trading strategies. A backtesting engine is a software that simulates the performance of a trading strategy on historical data. There are many backtesting engines available. In out work we mostly use Quantconnect.\nQuantconnect is cloud platform for quant research and trading. It is based on LEAN engine, which is open source. It supports backtesting and live trading. It is written in C# and supports python. It has a lot of data sources, and it is relativly easy to use. It is a perfect environment for backtesting trading strategies and simple migration to paper/live trading.\nSimilar, to programming languges, we want learn you how to use Quantconnect. We can only give you some recommendations on how to learn it.\nIt is not necessary to go into details. The recommendation is to start with equity for the beginning. Later you can try with options/futures or some other asset classes. You can use python and C#, but we recommend you to use python. Python is much more used in finance, and it has numerous packages that make your job easier.\nExcept Quantconnect, there are other backtesting platforms. Here are some for information, you can check them if you want: - Zorro trading engine - Writing fasting trading strategies in C-lite or C++. Source: https://zorro-project.com/ (C i C++) - Natulius trader - write trading strategies in python or rust. Source: https://nautilustrader.io/ - Backtrader - very popular backtesting engine written in pure python. Source: https://www.backtrader.com/ - Vectorbt - vektorized backtester in python. Source: https://vectorbt.dev/ - Some people develop their own backtester, but we don’t recommend it for the beginning, except for simple strategies that include for loops for quick analysis.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction (#section-intro)</span>"
    ]
  },
  {
    "objectID": "intro.html#becktesting-engine-quantconnect",
    "href": "intro.html#becktesting-engine-quantconnect",
    "title": "1  Introduction (#section-intro)",
    "section": "",
    "text": "register as a new user on https://www.quantconnect.com/\ngo through bootcamps that can be found by clicking on Algorithm Lab - Learning Center.\ngo through you tube video series (especially https://www.youtube.com/playlist?list=PLgWn81pQ2CNKcuUgFosE5YlfJvIZmbVG8)\nRead the documentation https://www.quantconnect.com/docs/v2/writing-algorithms",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction (#section-intro)</span>"
    ]
  },
  {
    "objectID": "intro.html#programming-languages",
    "href": "intro.html#programming-languages",
    "title": "1  Introduction (#section-intro)",
    "section": "1.2 Programming languages",
    "text": "1.2 Programming languages\nThe most used programming language in the world of finance is Python. It is a high-level programming language that is relatively easy to learn and use. Other popular programming languages in finance include R, C++, Java, and MATLAB. In our researching process, backtesting and deployment, we mostly use R, python and, occasionally, C++. Learning one of this languages is a must for every quant. The more languages you know, the more versatile you are.\nWe can’t teach you any of this languages in this book. We can only give you some recommendations on how to learn them. We recommend you to start with Python, as it is the most used language in finance. You can learn it through online tutorials, books, or courses. There are plenty of sources online. It also depends on you preferences, If you like more to watch videos start with them, if you like books start with them.\nIf you are beginnes, we recommend you to start with DataCamp (https://www.datacamp.com/). It has a lot of courses for beginners and advanced users. Second, don’t just learn the language, start developing strategies with it as soon as possible. The best way to learn a programming language is by using it. Just strt the project in your favorit IDE (say VS code) and start coding.\nIf you prefer R, we recommend you to start learn following packages: - data.table - for all data wrangling tasks. It is faster than dplyr in R and pandas in python and uses less memory. - ggplot - for visualization. - PerformanceAnalytics - for calculating various portfolio or individual stock performances. - runner - for creating rolling and expanding windows. Here only one function is important. - lubridate - for working with times in R (converting time zones and similar). - mlr3 (optional, if you use ML, (Binder et al. 2023)) - Something like scikit learn in python. - Rcpp (optional, if you want to use c++ within R). - the biggest advantage of R is the rich set of statistical packages that are already developed. By simply googling you can quickly find a lot of information. You need GARCH? USe ugarch package. You need ARIMA? Use forecast package. You need to calculate VaR? Use rugarch package. And so on.\nAll above packages are learned continuously, through the development of strategies and projects. Every day you learn something new.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction (#section-intro)</span>"
    ]
  },
  {
    "objectID": "intro.html#start-developing-strategies-as-soon-as-possible",
    "href": "intro.html#start-developing-strategies-as-soon-as-possible",
    "title": "1  Introduction (#section-intro)",
    "section": "1.3 Start developing strategies as soon as possible",
    "text": "1.3 Start developing strategies as soon as possible\nExcept learning programming languages and backtesting engines, you should start developing strategies as soon as possible. The best way to learn is by doing. When you start developing strategies, start with simple ones. The more complex the strategy, the more difficult it is to debug and understand. We will give you some recommendations on how to start developing strategies.\n…\nOsim učenja gornjih tehnologija, poslat ću i: 1) jednu postojeću strategiju kako bi je proučili i potencijalno poboljšali (zajednički možemo raspraviti kako se može poboljšati). 2) jednu novu strategiju koju možeš testirati kroz skriptu/notebook u programskom jeziku po izboru i/ili Quantconnectu.\n…\n\n1.3.1 Market orders vs limit orders\nhttps://x.com/macrocephalopod/status/1375937561366003723\nYou can always submit a limit order which crosses the spread, combining the benefit of immediacy for all reasonable cases with the protection of a price limit in case of an illiquid market or price jump. A market buy order is a limit order with a price limit of infinity.\nSeems relevant given the recent BRK.A shenanigans on 06/2024.\n\n\n\n\nBinder, Martin, Michel Lang, Lars Kotthoff, Patrick Schratz, Giuseppe Casalicchio, and Bernd Bischl. 2023. Machine Learning with r: A Complete Guide. mlr3book.mlr-org.com. https://mlr3book.mlr-org.com/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction (#section-intro)</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Binder, Martin, Michel Lang, Lars Kotthoff, Patrick Schratz, Giuseppe\nCasalicchio, and Bernd Bischl. 2023. Machine Learning with r: A\nComplete Guide. mlr3book.mlr-org.com. https://mlr3book.mlr-org.com/.",
    "crumbs": [
      "References"
    ]
  }
]